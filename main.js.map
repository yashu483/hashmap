{"version":3,"file":"main.js","mappings":"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","sources":["webpack://hashmap/./src/linkedlist.js","webpack://hashmap/./src/hashmap.js","webpack://hashmap/./src/index.js"],"sourcesContent":["'use strict';\n\nclass Node {\n  constructor(key, value = null) {\n    this.key = key;\n    this.value = value;\n    this.next = null;\n  }\n}\n\nclass LinkedList {\n  constructor() {\n    this.head = null;\n    this.tail = null;\n  }\n\n  append(key, value) {\n    const newNode = new Node(key, value);\n    if (this.head === null) {\n      this.head = newNode;\n      this.tail = newNode;\n    } else {\n      this.tail.next = newNode;\n      this.tail = newNode;\n    }\n  }\n\n  prepend(key, value) {\n    const newNode = new Node(key, value);\n    if (this.head === null) {\n      this.head = newNode;\n      this.tail = newNode;\n    } else {\n      newNode.next = this.head;\n      this.head = newNode;\n    }\n  }\n\n  get size() {\n    let count = 0;\n\n    const getSize = function getSize(node) {\n      count += 1;\n      if (node.next === null) {\n        return count;\n      } else {\n        return getSize(node.next);\n      }\n    };\n    return getSize(this.head);\n  }\n  at(index) {\n    const getNode = function getNode(node, index) {\n      if (index === 0) {\n        return node;\n      } else if (node.next === null && index > 0) {\n        return 'Error: Out of range Index.';\n      } else {\n        return getNode(node.next, index - 1);\n      }\n    };\n    return getNode(this.head, index);\n  }\n  pop() {\n    const remove = function remove(node) {\n      if (node.next.next === null) {\n        node.next = null;\n        return node;\n      } else {\n        return remove(node.next);\n      }\n    };\n    this.tail = remove(this.head);\n  }\n\n  contains(key) {\n    console.log(this.head);\n    const check = function check(node) {\n      if (node.next === null && node.key !== key) {\n        return false;\n      } else if (node.key === key) {\n        return true;\n      } else {\n        return check(node.next);\n      }\n    };\n    return check(this.head);\n  }\n\n  find(key) {\n    let count = 0;\n    const check = function check(node) {\n      if (node.next === null && node.key !== key) {\n        return null;\n      } else if (node.key === key) {\n        return count;\n      } else {\n        count += 1;\n        return check(node.next);\n      }\n    };\n    return check(this.head);\n  }\n  toString() {\n    let string = '';\n    const createString = function createString(node) {\n      if (node.next === null) {\n        return string + `(${node.value}) -> (${node.next})`;\n      } else {\n        string = string + `(${node.value})` + ` -> `;\n        return createString(node.next);\n      }\n    };\n    return createString(this.head);\n  }\n\n  insertAt(key, value, index) {\n    const newNode = new Node(key, value);\n    if (index === 0) {\n      if (this.head === null) {\n        this.head = newNode;\n        this.tail = newNode;\n      } else {\n        newNode.next = this.head;\n        this.head = newNode;\n      }\n      return;\n    }\n    let count = index;\n\n    const insert = function insert(node, count) {\n      if ((count > 1 && node.next === null) || count < 0) {\n        console.log('Out of range index.');\n        return;\n      }\n      if (count === 1 && node.next === null) {\n        node.next = newNode;\n        return;\n      } else if (count === 1) {\n        newNode.next = node.next;\n        node.next = newNode;\n      } else {\n        insert(node.next, count - 1);\n      }\n    };\n    insert(this.head, count);\n    if (this.tail.next !== null) {\n      this.tail = this.tail.next;\n    }\n  }\n\n  removeAt(index) {\n    if (index === 0) {\n      if (this.head === null) {\n        return;\n      } else {\n        this.head = this.head.next;\n        return;\n      }\n    }\n    const remove = function remove(node, index) {\n      if (\n        (index === 1 && node.next === null) ||\n        index < 0 ||\n        (index > 1 && node.next === null)\n      ) {\n        console.log('Out of range index.');\n        return;\n      } else if (index === 1) {\n        node.next = node.next.next;\n        return;\n      } else {\n        remove(node.next, index - 1);\n      }\n    };\n    remove(this.head, index);\n  }\n}\n\nexport { LinkedList };\n","'use strict';\nimport { LinkedList } from './linkedlist';\n\nclass HashMap {\n  constructor() {\n    this.capacity = 16;\n    this.loadFactor = 0.8;\n    this.container = [];\n  }\n\n  hash(key) {\n    let hashCode = 0;\n\n    const primeNumber = 31;\n    for (let i = 0; i < key.length; i++) {\n      hashCode = (primeNumber * hashCode + key.charCodeAt(i)) % 32;\n    }\n\n    return hashCode;\n  }\n\n  length() {\n    let count = 0;\n    this.container.forEach((item) => {\n      if (item instanceof LinkedList) {\n        count += item.size;\n      }\n    });\n    return count;\n  }\n  appendFromLinkedList(node) {\n    if (node.next === null) {\n      this.set(node.key, node.value);\n      return;\n    } else {\n      this.set(node.key, node.value);\n      this.appendFromLinkedList(node.next);\n    }\n  }\n  loadFactorReached() {\n    const totalBuckets = this.length();\n    const currentLoad = Math.round(this.capacity * this.loadFactor);\n    return totalBuckets >= currentLoad;\n  }\n  increaseCapacity() {\n    this.capacity *= 2;\n    let tempContainer = this.container;\n    this.container = [];\n    tempContainer.forEach((item, index) => {\n      if (Object.prototype.hasOwnProperty.call(tempContainer, index)) {\n        this.appendFromLinkedList(item.head);\n      }\n    });\n  }\n  set(key, value) {\n    const hashCode = this.hash(key);\n    if (this.loadFactorReached()) {\n      this.increaseCapacity();\n    }\n    if (!Object.prototype.hasOwnProperty.call(this.container, hashCode)) {\n      const list = new LinkedList();\n      list.append(key, value);\n      this.container[hashCode] = list;\n      return;\n    } else {\n      if (this.container[hashCode].contains(key)) {\n        let valueIndex = this.container[hashCode].find(key);\n        this.container[hashCode].insertAt(key, value, valueIndex);\n        return;\n      } else {\n        this.container[hashCode].append(key, value);\n        return;\n      }\n    }\n  }\n  get(key) {\n    const hashCode = this.hash(key);\n\n    if (!Object.prototype.hasOwnProperty.call(this.container, hashCode)) {\n      return null;\n    }\n\n    if (this.container[hashCode].contains(key)) {\n      let keyIndex = this.container[hashCode].find(key);\n      let node = this.container[hashCode].at(keyIndex);\n      return node.value;\n    } else {\n      return null;\n    }\n  }\n  has(key) {\n    const hashCode = this.hash(key);\n\n    if (!Object.prototype.hasOwnProperty.call(this.container, hashCode)) {\n      return false;\n    }\n    if (this.container[hashCode].contains(key)) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  remove(key) {\n    const hashCode = this.hash(key);\n    if (!Object.prototype.hasOwnProperty.call(this.container, hashCode)) {\n      return false;\n    }\n    if (this.container[hashCode].contains(key)) {\n      let keyIndex = this.container[hashCode].find(key);\n      this.container[hashCode].removeAt(keyIndex);\n      if (this.container[hashCode].size === 0) {\n        this.container.splice(hashCode, 1);\n        return true;\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n  clear() {\n    this.container = [];\n  }\n  keys() {\n    let arr = [];\n    this.container.forEach((item, index) => {\n      if (Object.prototype.hasOwnProperty.call(this.container, index)) {\n        function returnKeys(node, array) {\n          if (node.next === null) {\n            array.push(node.key);\n            return;\n          } else {\n            array.push(node.key);\n            returnKeys(node.next, array);\n          }\n        }\n        returnKeys(item.head, arr);\n      }\n    });\n    return arr;\n  }\n\n  values() {\n    let arr = [];\n    this.container.forEach((item, index) => {\n      if (Object.prototype.hasOwnProperty.call(this.container, index)) {\n        function returnKeys(node, array) {\n          if (node.next === null) {\n            array.push(node.value);\n            return;\n          } else {\n            array.push(node.value);\n            returnKeys(node.next, array);\n          }\n        }\n        returnKeys(item.head, arr);\n      }\n    });\n    return arr;\n  }\n  entries() {\n    let keyArr = this.keys();\n    let valueArr = this.values();\n\n    const entryArr = [];\n    for (let i = keyArr.length; i > 0; i--) {\n      let tempArr = [];\n      tempArr.push(keyArr[i]);\n      tempArr.push(valueArr[i]);\n      entryArr.push(tempArr);\n    }\n    return entryArr;\n  }\n}\n\nexport { HashMap };\n","'use strict';\n\nimport { HashMap } from './hashmap';\n\n// add HashMap constructor to window so that it can be used in console\nwindow.HashMap = HashMap;\n\nconst myMap = new HashMap(); // or HashMap() if using a factory\n\nmyMap.set('apple', 'red');\nmyMap.set('banana', 'yellow');\nmyMap.set('carrot', 'orange');\nmyMap.set('dog', 'brown');\nmyMap.set('elephant', 'gray');\nmyMap.set('frog', 'green');\nmyMap.set('grape', 'purple');\nmyMap.set('hat', 'black');\nmyMap.set('ice cream', 'white');\nmyMap.set('jacket', 'blue');\nmyMap.set('kite', 'pink');\nmyMap.set('lion', 'golden');\n\nwindow.myMap = myMap;\n\nfunction initialize() {\n  console.clear();\n  console.log('');\n  console.log(\n    `You can use HashMap constructor to test the code. myMap is a built in hashmap created using same HashMap constructor. And it contains key value pair as shown in the table on landing page. You can freely test it.`,\n  );\n}\n\ninitialize();\n"],"names":["Node","constructor","key","value","this","next","LinkedList","head","tail","append","newNode","prepend","size","count","getSize","node","at","index","getNode","pop","remove","contains","console","log","check","find","toString","string","createString","insertAt","insert","removeAt","HashMap","capacity","loadFactor","container","hash","hashCode","i","length","charCodeAt","forEach","item","appendFromLinkedList","set","loadFactorReached","Math","round","increaseCapacity","tempContainer","Object","prototype","hasOwnProperty","call","list","valueIndex","get","keyIndex","has","splice","clear","keys","arr","returnKeys","array","push","values","entries","keyArr","valueArr","entryArr","tempArr","window","myMap"],"sourceRoot":""}